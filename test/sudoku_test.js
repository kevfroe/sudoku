

var sudoku = require("../chrome_extension/src/sudoku.js");
var board = new sudoku.SudokuBoard();
var test_num = 0;

function test_puzzle (values) {
	test_num++;
	console.log("TEST " + test_num + " start");
	var board = new sudoku.SudokuBoard();
	board.set(values);
	board.solve();
	console.log((board.isSolved()) ? "Passed" : "FAILED!!!");
}

test_puzzle([7,0,2,0,0,1,4,0,0,
             0,0,8,0,0,6,0,3,0,
             0,1,0,0,0,0,0,0,9,
             0,0,0,0,1,2,0,5,0,
             0,2,0,0,0,0,0,7,0,
             0,4,0,5,7,0,0,0,0,
             3,0,0,0,0,0,0,2,0,
             0,7,0,6,0,0,5,0,0,
             0,0,5,3,0,0,6,0,8]);

test_puzzle([0,0,0,0,0,1,0,2,0,
             0,0,8,7,0,3,5,0,0,
             9,0,3,0,0,2,0,0,0,
             2,0,5,0,0,0,0,0,6,
             0,0,0,0,7,0,0,0,0,
             6,0,0,0,0,0,8,0,1,
             0,0,0,3,0,0,4,0,9,
             0,0,2,9,0,8,7,0,0,
             0,4,0,1,0,0,0,0,0]);

test_puzzle([9,2,0,0,0,5,1,0,0,
             0,0,0,0,4,0,0,0,0,
             1,0,0,6,0,0,7,0,0,
             0,6,0,0,8,0,0,0,0,
             3,0,2,0,0,0,8,0,5,
             0,0,0,0,9,0,0,4,0,
             0,0,7,0,0,3,0,0,8,
             0,0,0,0,5,0,0,0,0,
             0,0,1,7,0,0,0,5,2]);

test_puzzle([0,0,0,0,0,3,2,0,0,
             0,0,5,0,0,0,0,0,8,
             4,0,0,7,9,0,3,6,0,
             0,0,0,5,0,0,0,0,2,
             5,0,0,8,0,4,0,0,7,
             3,0,0,0,0,1,0,0,0,
             0,8,7,0,1,5,0,0,3,
             9,0,0,0,0,0,1,0,0,
             0,0,4,3,0,0,0,0,0]);

test_puzzle([0,0,7,9,0,0,0,0,0,
             1,0,0,0,0,3,0,5,0,
             0,9,0,0,8,0,0,0,2,
             9,0,0,0,3,0,0,6,0,
             0,7,0,0,0,0,0,8,0,
             0,8,0,0,6,0,0,0,5,
             4,0,0,0,1,0,0,7,0,
             0,2,0,5,0,0,0,0,6,
             0,0,0,0,0,4,8,0,0]);

test_puzzle([0,3,8,6,0,0,1,4,0,
             1,4,0,0,8,0,0,0,2,
             0,0,0,0,0,0,0,0,0,
             0,0,0,0,7,9,2,0,0,
             0,0,1,0,0,0,7,0,0,
             0,0,6,8,5,0,0,0,0,
             0,0,0,0,0,0,0,0,0,
             6,0,0,0,4,0,0,2,5,
             0,9,4,0,0,2,8,1,0]);

test_puzzle([0,0,0,7,0,0,8,0,0,
             0,0,5,0,0,9,1,7,0,
             0,0,0,0,1,0,0,5,6,
             4,0,0,0,7,0,0,3,0,
             1,0,0,0,0,0,0,0,9,
             0,7,0,0,5,0,0,0,2,
             7,4,0,0,9,0,0,0,0,
             0,3,1,2,0,0,4,0,0,
             0,0,6,0,0,3,0,0,0]);

test_puzzle([0,0,0,0,7,2,0,0,0,
             9,0,0,0,0,0,0,3,0,
             0,6,0,1,0,0,4,0,0,
             0,8,0,0,3,0,5,0,0,
             0,7,5,0,0,0,2,9,0,
             0,0,6,0,4,0,0,8,0,
             0,0,7,0,0,8,0,2,0,
             0,1,0,0,0,0,0,0,9,
             0,0,0,9,1,0,0,0,0]);

test_puzzle([0,8,0,0,0,0,0,0,0,
             2,0,0,0,1,0,6,0,0,
             0,1,4,0,7,2,0,0,0,
             0,0,3,0,0,7,0,0,4,
             8,0,0,0,9,0,0,0,3,
             5,0,0,4,0,0,9,0,0,
             0,0,0,6,2,0,3,1,0,
             0,0,9,0,5,0,0,0,2,
             0,0,0,0,0,0,0,8,0]);

test_puzzle([0,9,0,0,6,1,2,0,4,
             0,0,0,0,5,3,0,0,6,
             1,0,0,0,0,0,0,0,0,
             0,1,0,0,0,0,4,0,0,
             4,0,2,0,0,0,9,0,5,
             0,0,8,0,0,0,0,7,0,
             0,0,0,0,0,0,0,0,7,
             6,0,0,8,2,0,0,0,0,
             3,0,5,1,4,0,0,6,0]);

//test_puzzle([0,0,0,0,0,0,0,0,0,
//             0,0,0,0,0,0,0,0,0,
//             0,0,0,0,0,0,0,0,0,
//             0,0,0,0,0,0,0,0,0,
//             0,0,0,0,0,0,0,0,0,
//             0,0,0,0,0,0,0,0,0,
//             0,0,0,0,0,0,0,0,0,
//             0,0,0,0,0,0,0,0,0,
//             0,0,0,0,0,0,0,0,0]);
