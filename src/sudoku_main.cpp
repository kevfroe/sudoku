#include <iostream>

//------------------------------------------------------------
//------------------------------------------------------------
//------------------------------------------------------------

#define NUM_CELLS           (9*9)
#define CELL_VALUE_INVALID  (0)
#define CELL_VALUE_CNT      (9)

  var _row_indices = [
    [ 0, 1, 2, 3, 4, 5, 6, 7, 8],
    [ 9,10,11,12,13,14,15,16,17],
    [18,19,20,21,22,23,24,25,26],
    [27,28,29,30,31,32,33,34,35],
    [36,37,38,39,40,41,42,43,44],
    [45,46,47,48,49,50,51,52,53],
    [54,55,56,57,58,59,60,61,62],
    [63,64,65,66,67,68,69,70,71],
    [72,73,74,75,76,77,78,79,80],
  ];
  
  var _col_indices = [
    [ 0, 9,18,27,36,45,54,63,72],
    [ 1,10,19,28,37,46,55,64,73],
    [ 2,11,20,29,38,47,56,65,74],
    [ 3,12,21,30,39,48,57,66,75],
    [ 4,13,22,31,40,49,58,67,76],
    [ 5,14,23,32,41,50,59,68,77],
    [ 6,15,24,33,42,51,60,69,78],
    [ 7,16,25,34,43,52,61,70,79],
    [ 8,17,26,35,44,53,62,71,80],
  ];
  
  var _box_indices = [
    [ 0, 1, 2, 9,10,11,18,19,20],
    [ 3, 4, 5,12,13,14,21,22,23],
    [ 6, 7, 8,15,16,17,24,25,26],
    [27,28,29,36,37,38,45,46,47],
    [30,31,32,39,40,41,48,49,50],
    [33,34,35,42,43,44,51,52,53],
    [54,55,56,63,64,65,72,73,74],
    [57,58,59,66,67,68,75,76,77],
    [60,61,62,69,70,71,78,79,80],
  ];

//------------------------------------------------------------
//------------------------------------------------------------
//------------------------------------------------------------

/*
typedef enum _CELL_VALUE {
	CELL_VALUE_INVALID,
	CELL_VALUE_1,
	CELL_VALUE_2,
	CELL_VALUE_3,
	CELL_VALUE_4,
	CELL_VALUE_5,
	CELL_VALUE_6,
	CELL_VALUE_7,
	CELL_VALUE_8,
	CELL_VALUE_9,

	CELL_VALUE_CNT = CELL_VALUE_9,
} CELL_VALUE;
*/

typedef struct _CELL {
	unsigned int value;
	unsigned int poss[CELL_VALUE_CNT];
	unsigned int poss_len;
} CELL;

typedef struct _BOARD {
	CELL cells[NUM_CELLS];
} BOARD;

//------------------------------------------------------------
//------------------------------------------------------------
//------------------------------------------------------------

static unsigned int 
//------------------------------------------------------------
//------------------------------------------------------------
//------------------------------------------------------------

//------------------------------------------------------------
void cell_remove_poss (CELL cell, unsigned int value)
{
	;
}

//------------------------------------------------------------
void board_initialize (BOARD board)
{
	for (unsigned int i = 0; i < NUM_CELLS; i++) {
		board.cells[i].value    = CELL_VALUE_INVALID;
		board.cells[i].poss_len = CELL_VALUE_CNT;
		for (unsigned int j = 0; j < CELL_VALUE_CNT; j++) {
			board.cells[i].poss[j] = j+1;
		}
	}
}

//------------------------------------------------------------
void board_set (BOARD board, int *values)
{
	for (unsigned int i = 0; i < NUM_CELLS; i++) {
		board.cells[i] = values[i];
	}
}

//------------------------------------------------------------
void board_solve (BOARD board)
{
	;
}

//------------------------------------------------------------
void board_print (BOARD board)
{
	;
}

//------------------------------------------------------------
//------------------------------------------------------------
//------------------------------------------------------------

//------------------------------------------------------------
int main (int argc, char **argv)
{
	BOARD board;
	int   value_set_1[] = {0,0,0,0,0,1,0,2,0, \
		                   0,0,8,7,0,3,5,0,0, \
		                   9,0,3,0,0,2,0,0,0, \
		                   2,0,5,0,0,0,0,0,6, \
		                   0,0,0,0,7,0,0,0,0, \
		                   6,0,0,0,0,0,8,0,1, \
		                   0,0,0,3,0,0,4,0,9, \
		                   0,0,2,9,0,8,7,0,0, \
		                   0,4,0,1,0,0,0,0,0};

	board_initialize(board);

	board_set (board, value_set_1);
	board_solve (board);
	board_print (board);

	return 0;
}

